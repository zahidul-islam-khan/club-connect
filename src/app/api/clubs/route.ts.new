import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

// Handler for GET requests to /api/clubs
// Returns a list of all clubs with membership status for authenticated users
export async function GET(request: NextRequest) {
  try {
    console.log("GET /api/clubs: Received request");
    
    // Get search parameters if any
    const { searchParams } = new URL(request.url)
    const search = searchParams.get('search') || ''
    const statusParam = searchParams.get('status') || 'ACTIVE'
    
    // Initialize a membership map
    const membershipMap = new Map();
    
    // Check if user is authenticated and get their membership statuses
    const session = await getServerSession(authOptions);
    console.log("Current session:", session ? `User: ${session.user.email}` : "No authenticated user");
    
    if (session?.user?.id) {
      // Get user's memberships to check status
      const userMemberships = await db.membership.findMany({
        where: { userId: session.user.id },
        select: {
          clubId: true,
          status: true,
        },
      });

      // Create a map of club IDs to membership status for quick lookup
      userMemberships.forEach((membership) => {
        membershipMap.set(membership.clubId, membership.status);
      });
      
      console.log(`Found ${userMemberships.length} memberships for user ${session.user.id}`);
    }

    // Query clubs from the database with filtering
    const whereClause = {};
    if (statusParam) {
      whereClause.status = statusParam;
    }
    if (search) {
      whereClause.OR = [
        { name: { contains: search } },
        { description: { contains: search } },
        { department: { contains: search } },
      ];
    }
    
    const clubs = await db.club.findMany({
      where: whereClause,
      include: {
        leader: {
          select: { name: true, email: true }
        },
        _count: {
          select: { 
            memberships: { where: { status: 'ACCEPTED' } },
            events: true
          }
        }
      },
      orderBy: { name: 'asc' }
    });

    const clubsWithMembership = clubs.map((club) => {
      // Parse activities from JSON string
      let activities = [];
      try {
        activities = club.activities ? JSON.parse(club.activities) : [];
      } catch (e) {
        activities = club.activities ? club.activities.split(', ') : [];
      }

      return {
        id: club.id,
        name: club.name,
        description: club.description,
        category: club.category,
        department: club.department,
        status: club.status,
        logoUrl: club.logoUrl,
        website: club.website,
        email: club.email,
        phone: club.phone,
        advisor: club.advisor,
        foundedYear: club.foundedYear,
        vision: club.vision,
        mission: club.mission,
        activities: activities,
        leaderId: club.leaderId,
        leader: club.leader,
        memberCount: club._count.memberships,
        eventCount: club._count.events,
        membershipStatus: membershipMap.get(club.id) || null,
      };
    });

    // Make sure we're sending a valid JSON response
    if (!clubsWithMembership || clubsWithMembership.length === 0) {
      console.log("WARNING: No clubs found in database!");
      // Return an empty array with a clear message
      return NextResponse.json({ 
        clubs: [],
        message: "No clubs found in database. Try running the seed script." 
      });
    }
    
    console.log("API returning clubs:", clubsWithMembership.length, "First club:", clubsWithMembership[0]?.name || "unknown");
    return NextResponse.json({ 
      clubs: clubsWithMembership,
      count: clubsWithMembership.length
    });
  } catch (error) {
    console.error('Clubs API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
